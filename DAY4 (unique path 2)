class Solution {
public:
    int m,n;
    vector<vector<int>> dp;
    
    int solve(vector<vector<int>>& obstacleGrid,int i,int j){

        if(i==m-1 && j==n-1) return 1;

        if(i>=m || j>=n) return 0;

        if (obstacleGrid[i][j] == 1) return 0;


        if(dp[i][j]!=-1) return dp[i][j];
        
        int right = solve(obstacleGrid,i,j+1);
        int down = solve(obstacleGrid,i+1,j);

        return dp[i][j] = right+down; 
        
    }
    
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {

         m = obstacleGrid.size();
         n = obstacleGrid[0].size();

         if (obstacleGrid[0][0] == 1 || obstacleGrid[m-1][n-1] == 1) return 0;

        dp.assign(m,vector<int>(n,-1));

        return solve(obstacleGrid,0,0);
        
    }
};
