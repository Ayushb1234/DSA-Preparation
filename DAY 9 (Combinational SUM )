class Solution {
public:

    int solve(vector<int>& nums, int target,int i,vector<int>& dp){

        if(target == 0) return 1;

        if(target < 0) return 0;

        // if(i == nums.size()) return 0;

        if(dp[target] != -1) return dp[target];

        // int take = solve(nums,target-nums[i],i,dp);
        // int skip = solve(nums,target,i+1,dp);

        int count = 0;

        for(auto x : nums){

            count += solve(nums,target-x,i,dp);
        }



        return dp[target] = count;


    }
    int combinationSum4(vector<int>& nums, int target) {

        int n = nums.size();

        vector<int> dp(target+1,-1);

        return solve(nums,target,0,dp);
        
    }
};
int dummy = (std::atexit([](){ std::ofstream("display_runtime.txt") << "0"; }), 0);
