#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    long long solve(string& s, string& t, int i, int j, vector<vector<long long>>& dp) {
        // if t is fully matched → 1 valid subsequence
        if (j == 0) return 1;
        // if s is exhausted but t is not → no subsequence
        if (i == 0) return 0;

        if (dp[i][j] != -1) return dp[i][j];

        if (s[i-1] == t[j-1]) {
            // include s[i-1] + exclude s[i-1]
            return dp[i][j] = solve(s, t, i-1, j-1, dp) + solve(s, t, i-1, j, dp);
        } else {
            // skip s[i-1]
            return dp[i][j] = solve(s, t, i-1, j, dp);
        }
    }

    int numDistinct(string s, string t) {
        int m = s.size(), n = t.size();
        vector<vector<long long>> dp(m+1, vector<long long>(n+1, -1));
        return (int)solve(s, t, m, n, dp);
    }
};
