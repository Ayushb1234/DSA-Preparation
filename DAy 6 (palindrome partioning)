class Solution {
public:
    bool isplaindrome(string &s,int left,int right){

        int n = s.length();

        while(left < right){

            if(s[left++] != s[right--]){
                return false;
            }
        }

    return true;
    }

    void backtrack(string& s,int start,vector<string>& current,vector<vector<string>>& ans){

        if(start == s.size()){
            ans.push_back(current);
            return;
        }

        for(int end = start; end < s.size(); end++){
            if(isplaindrome(s,start,end)){
                current.push_back(s.substr(start, end - start + 1));
                backtrack(s, end + 1, current, ans);
                current.pop_back();

            }


        }

    }

    vector<vector<string>> partition(string s) {

        // vector<vector<string>> ans;

        // int n = s.length();

        // for(int i=0;i<n;i++){
        //     for(int j=0;j<ans[i].size();j++){

        //     if(ispalindrome(ans[i][j]))


        //     }
        // }

        vector<vector<string>> result;
        vector<string> current;
        backtrack(s, 0, current, result);
        return result;

    }
};
